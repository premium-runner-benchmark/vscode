name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - release/*
  pull_request:
    branches:
      - master
      - release/*

jobs:
  # linux:
  #   runs-on: ubuntu-latest
  #   env:
  #     CHILD_CONCURRENCY: "1"
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #   - uses: actions/checkout@v1
  #   # TODO: rename azure-pipelines/linux/xvfb.init to github-actions
  #   - run: |
  #       sudo apt-get update
  #       sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libgbm1
  #       sudo cp build/azure-pipelines/linux/xvfb.init /etc/init.d/xvfb
  #       sudo chmod +x /etc/init.d/xvfb
  #       sudo update-rc.d xvfb defaults
  #       sudo service xvfb start
  #     name: Setup Build Environment
  #   - uses: actions/setup-node@v1
  #     with:
  #       node-version: 10
  #   # TODO: cache node modules
  #   - run: yarn --frozen-lockfile
  #     name: Install Dependencies
  #   - run: yarn electron x64
  #     name: Download Electron
  #   - run: yarn gulp hygiene
  #     name: Run Hygiene Checks
  #   - run: yarn monaco-compile-check
  #     name: Run Monaco Editor Checks
  #   - run: yarn valid-layers-check
  #     name: Run Valid Layers Checks
  #   - run: yarn compile
  #     name: Compile Sources
  #   - run: yarn download-builtin-extensions
  #     name: Download Built-in Extensions
  #   - run: DISPLAY=:10 ./scripts/test.sh --tfs "Unit Tests"
  #     name: Run Unit Tests (Electron)
  #   - run: DISPLAY=:10 yarn test-browser --browser chromium
  #     name: Run Unit Tests (Browser)
  #   - run: DISPLAY=:10 ./scripts/test-integration.sh --tfs "Integration Tests"
  #     name: Run Integration Tests (Electron)

  # windows:
  #   runs-on: windows-2016
  #   env:
  #     CHILD_CONCURRENCY: "1"
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #   - uses: actions/checkout@v1
  #   - uses: actions/setup-node@v1
  #     with:
  #       node-version: 10
  #   - uses: actions/setup-python@v1
  #     with:
  #       python-version: '2.x'
  #   - run: yarn --frozen-lockfile
  #     name: Install Dependencies
  #   - run: yarn electron
  #     name: Download Electron
  #   - run: yarn gulp hygiene
  #     name: Run Hygiene Checks
  #   - run: yarn monaco-compile-check
  #     name: Run Monaco Editor Checks
  #   - run: yarn valid-layers-check
  #     name: Run Valid Layers Checks
  #   - run: yarn compile
  #     name: Compile Sources
  #   - run: yarn download-builtin-extensions
  #     name: Download Built-in Extensions
  #   - run: .\scripts\test.bat --tfs "Unit Tests"
  #     name: Run Unit Tests (Electron)
  #   - run: yarn test-browser --browser chromium
  #     name: Run Unit Tests (Browser)
  #   - run: .\scripts\test-integration.bat --tfs "Integration Tests"
  #     name: Run Integration Tests (Electron)

  # darwin:
  #   runs-on: macos-latest
  #   env:
  #     CHILD_CONCURRENCY: "1"
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #   - uses: actions/checkout@v1
  #   - uses: actions/setup-node@v1
  #     with:
  #       node-version: 10
  #   - run: yarn --frozen-lockfile
  #     name: Install Dependencies
  #   - run: yarn electron x64
  #     name: Download Electron
  #   - run: yarn gulp hygiene
  #     name: Run Hygiene Checks
  #   - run: yarn monaco-compile-check
  #     name: Run Monaco Editor Checks
  #   - run: yarn valid-layers-check
  #     name: Run Valid Layers Checks
  #   - run: yarn compile
  #     name: Compile Sources
  #   - run: yarn download-builtin-extensions
  #     name: Download Built-in Extensions
  #   - run: ./scripts/test.sh --tfs "Unit Tests"
  #     name: Run Unit Tests (Electron)
  #   - run: yarn test-browser --browser chromium --browser webkit
  #     name: Run Unit Tests (Browser)
  #   - run: ./scripts/test-integration.sh --tfs "Integration Tests"
  #     name: Run Integration Tests (Electron)


  monaco:
    runs-on: ${{ matrix.runner_type }}
    continue-on-error: true
    strategy:
      matrix:
        runner_type: [ds2v2,ds2v3,d2dsv4,d2asv4,m5large,n2s2,ds3v2,ds4v2,ds5v2,f4s,c2s4,c5xlarge,f32s,f64s,ubuntu-20.04]]
    
    env:
      #### For stat collection
      runId: ${{ matrix.runner_type }}-${{ github.workflow }}
      artifactsDir: artifacts/${{ github.repository }}
      iostatFile: artifacts/${{ github.repository }}/${{ matrix.runner_type }}-iostat.txt
      vmstatFile: artifacts/${{ github.repository }}/${{ matrix.runner_type }}-vmstat.txt
      timingFile: artifacts/${{ github.repository }}/${{ matrix.runner_type }}-timing.txt
      ##########################
      CHILD_CONCURRENCY: "1"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
    #### Start stat collection
    - run: mkdir -p ${{ runner.temp }}/${{ env.artifactsDir }}
    - run: iostat -yxmt 1 > ${{ runner.temp }}/${{ env.iostatFile }} &
    - run: vmstat -n 1 > ${{ runner.temp }}/${{ env.vmstatFile }} &
    - run: date -R > ${{ runner.temp }}/${{ env.timingFile }}
    ##########################
    - run: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.0/install.sh | bash
        source ~/.nvm/nvm.sh
        nvm install 10.0
        curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
        echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
        sudo apt update && sudo apt install --no-install-recommends yarn
        sudo apt-get install sqlite3
        
    - uses: actions/checkout@v1
    # TODO: rename azure-pipelines/linux/xvfb.init to github-actions
    - run: |
        sudo apt-get update
        sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libgbm1
        sudo cp build/azure-pipelines/linux/xvfb.init /etc/init.d/xvfb
        sudo chmod +x /etc/init.d/xvfb
        sudo update-rc.d xvfb defaults
        sudo service xvfb start
    #name: Setup Build Environment
    - uses: actions/setup-node@v1
      with:
        node-version: 10
    - name: Setup Python
      uses: actions/setup-python@v2.1.4
    - run: yarn --frozen-lockfile
      name: Install Dependencies
    - run: yarn monaco-compile-check
      name: Run Monaco Editor Checks
    - run: yarn gulp editor-esm-bundle
      name: Editor Distro & ESM Bundle

   #### Collect/upload stats
    - run: date -R >> ${{ runner.temp }}/${{ env.timingFile }}
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: perfdata
        path: ${{ runner.temp }}/${{ env.artifactsDir }}
        if-no-files-found: error
    - name: Runner workspace path
      run: |
        echo "Cleaning up previous run"
        rm -rf "${{ github.workspace }}"
    ##########################

  process:
    name: Process Perf Data
    continue-on-error: true
    runs-on: ubuntu-latest
    needs: [monaco]
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
          architecture: x64
      - uses: actions/checkout@v2
        with:
          repository: pjquirk/runnerperf
          path: runnerperf
      - uses: actions/checkout@v2
        with:
          repository: pjquirk/iostat-tool
          path: runnerperf/iostat-tool
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2  
        with:
          name: perfdata
          path: runnerperf/data
      - name: Prereqs
        run: sudo apt -y install datamash  
      - name: Process stats
        run: |
          cd runnerperf
          (cd iostat-tool && python setup.py develop)
          ls -l data
          script/dumpcsv.sh data output
          script/aggregate.sh output ${{ github.repository }}
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: summary-perfdata
          path: runnerperf/output/summary.csv
          if-no-files-found: error

